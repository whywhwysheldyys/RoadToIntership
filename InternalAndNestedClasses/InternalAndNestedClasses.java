package InternalAndNestedClasses;

//public class InternalAndNestedClasses {
//    üß© –ó–∞–¥–∞—á–∞ 1. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
//    –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Library, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å Book.
//    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
//    Book —Ö—Ä–∞–Ω–∏—Ç title –∏ author.
//    Library —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ addBook(String title, String author) ‚Äî —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç Book –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫.
//    Library —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ printBooks() ‚Äî –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
//            "–ù–∞–∑–≤–∞–Ω–∏–µ: <title>, –ê–≤—Ç–æ—Ä: <author>"
//    class Library {
//        private java.util.List<Book> books = new java.util.ArrayList<>();
//
//        class Book {
//            String title;
//            String author;
//
//            Book(String title, String author) {
//                this.title = title;
//                this.author = author;
//            }
//        }
//
//        void addBook(String title, String author) {
//            Book book = new Book(title, author);
//            books.add(book);
//        }
//
//        void printBooks() {
//            for (Book book : books) {
//                System.out.println("–ù–∞–∑–≤–∞–Ω–∏–µ: " + book.title + ", –ê–≤—Ç–æ—Ä: " + book.author);
//            }
//        }
//    }

//‚öôÔ∏è –ó–∞–¥–∞—á–∞ 2. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å ‚Äî –≥–µ–æ–º–µ—Ç—Ä–∏—è
//    –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å MathUtils —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–ª–∞—Å—Å–æ–º Circle.
//    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
//    Circle —Ö—Ä–∞–Ω–∏—Ç —Ä–∞–¥–∏—É—Å.
//    –í Circle —Ä–µ–∞–ª–∏–∑—É–π –º–µ—Ç–æ–¥—ã:
//    getArea() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞.
//            getPerimeter() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏.
//    –í MathUtils –¥–æ–±–∞–≤—å –º–µ—Ç–æ–¥ printCircleInfo(double r), –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç Circle –∏ –≤—ã–≤–æ–¥–∏—Ç:
//    –†–∞–¥–∏—É—Å: <r>, –ü–ª–æ—â–∞–¥—å: <area>, –ü–µ—Ä–∏–º–µ—Ç—Ä: <perimeter>
//    class MathUtils {
//        static class Circle {
//            double radius;
//
//            Circle(double radius) {
//                this.radius = radius;
//            }
//
//            double getArea() {
//                return Math.PI * radius * radius;
//            }
//
//            double getPerimeter() {
//                return 2 * Math.PI * radius;
//            }
//        }
//
//        static void printCircleInfo(double r) {
//            Circle circle = new Circle(r);
//            System.out.println("–†–∞–¥–∏—É—Å: " + r + ", –ü–ª–æ—â–∞–¥—å: " + circle.getArea() + ", –ü–µ—Ä–∏–º–µ—Ç—Ä: " + circle.getPerimeter());
//        }
//    }

//üß† –ó–∞–¥–∞—á–∞ 3. –í–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
//    –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Computer —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∫–ª–∞—Å—Å–æ–º Processor –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–ª–∞—Å—Å–æ–º Memory.
//    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
//    –£ Processor –µ—Å—Ç—å –ø–æ–ª—è cores (—á–∏—Å–ª–æ —è–¥–µ—Ä) –∏ frequency (–ì–ì—Ü).
//    –£ Memory –µ—Å—Ç—å –ø–æ–ª–µ size (–≤ –ì–ë).
//    –í Computer —Ä–µ–∞–ª–∏–∑—É–π –º–µ—Ç–æ–¥ showConfig(), –∫–æ—Ç–æ—Ä—ã–π:
//    —Å–æ–∑–¥–∞—ë—Ç Processor —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 —è–¥–µ—Ä, 3.6 –ì–ì—Ü);
//    —Å–æ–∑–¥–∞—ë—Ç Memory —Å —Ä–∞–∑–º–µ—Ä–æ–º 16 –ì–ë;
//    –≤—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:
//    –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: 8 —è–¥–µ—Ä, 3.6 –ì–ì—Ü
//    –ü–∞–º—è—Ç—å: 16 –ì–ë
//    class Computer {
//        class Processor {
//            int cores;
//            double frequency;
//
//            Processor(int cores, double frequency) {
//                this.cores = cores;
//                this.frequency = frequency;
//            }
//        }
//
//        static class Memory {
//            int size;
//
//            Memory(int size) {
//                this.size = size;
//            }
//        }
//
//        void showConfig() {
//            Processor processor = new Processor(8, 3.6);
//            Memory memory = new Memory(16);
//            System.out.println("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: " + processor.cores + " —è–¥–µ—Ä, " + processor.frequency + " –ì–ì—Ü");
//            System.out.println("–ü–∞–º—è—Ç—å: " + memory.size + " –ì–ë");
//        }
//    }
//}
