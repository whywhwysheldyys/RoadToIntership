package CountEnum;


//    üîπ –ó–∞–¥–∞—á–∞ 1 ‚Äî –ü—Ä–æ—Å—Ç–∞—è
//
//    –°–æ–∑–¥–∞–π –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ DayOfWeek, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ 7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (MONDAY, TUESDAY, ‚Ä¶, SUNDAY).
//
//    –í Main –Ω–∞–ø–∏—à–∏ –º–µ—Ç–æ–¥:
//
//    public static boolean isWeekend(DayOfWeek day)
//
//
//    –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –¥–µ–Ω—å ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π (SATURDAY –∏–ª–∏ SUNDAY), –∏ false –∏–Ω–∞—á–µ.
//
//    –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
//
//    MONDAY ‚Üí –†–∞–±–æ—á–∏–π –¥–µ–Ω—å
//    SUNDAY ‚Üí –í—ã—Ö–æ–¥–Ω–æ–π

//    enum DayOfWeek {
//        MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
//    }
//
//    public class CountEnum {
//        public static boolean isWeekend(DayOfWeek day) {
//            return day == DayOfWeek.SATURDAY || day == DayOfWeek.SUNDAY;
//        }
//
//        public static void main(String[] args) {
//            DayOfWeek[] days = DayOfWeek.values();
//
//            for (DayOfWeek day : days) {
//                if (isWeekend(day)) {
//                    System.out.println(day + " ‚Üí –í—ã—Ö–æ–¥–Ω–æ–π");
//                } else {
//                    System.out.println(day + " ‚Üí –†–∞–±–æ—á–∏–π –¥–µ–Ω—å");
//                }
//            }
//        }
//    }

//üîπ –ó–∞–¥–∞—á–∞ 2 ‚Äî –°—Ä–µ–¥–Ω—è—è
//
//–°–æ–∑–¥–∞–π –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ CoffeeSize —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:
//
//SMALL(200 –º–ª), MEDIUM(300 –º–ª), LARGE(400 –º–ª)
//
//
//–ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä—ë–º (–≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö).
//–î–æ–±–∞–≤—å:
//
//–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—ä—ë–º,
//
//–º–µ—Ç–æ–¥ getVolume(),
//
//–º–µ—Ç–æ–¥ toString(), –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:
//        "LARGE (400 –º–ª)".
//
//–í Main —Å–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤ –∏–∑ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≤—ã–≤–µ–¥–∏ –∏—Ö —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for (CoffeeSize size : CoffeeSize.values()).

//enum CoffeeSize {
//    SMALL(200),
//    MEDIUM(300),
//    LARGE(400);
//
//    private final int volume;
//
//    CoffeeSize(int volume) {
//        this.volume = volume;
//    }
//
//    public int getVolume() {
//        return volume;
//    }
//
//    @Override
//    public String toString() {
//        return this.name() + " (" + volume + " –º–ª)";
//    }
//}
//
//public class CountEnum {
//    public static void main(String[] args) {
//        for (CoffeeSize size : CoffeeSize.values()) {
//            System.out.println(size);
//        }
//    }
//}

//üîπ –ó–∞–¥–∞—á–∞ 3 ‚Äî –°–ª–æ–∂–Ω–∞—è
//
//–°–æ–∑–¥–∞–π –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ Operation –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
//
//ADD(+), SUBTRACT(-), MULTIPLY(*), DIVIDE(/)
//
//
//–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥:
//
//public abstract double apply(double a, double b);
//
//
//–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
//
//        System.out.println(Operation.ADD.apply(5, 3));       // 8
//        System.out.println(Operation.MULTIPLY.apply(2, 4));  // 8
//
//
//        ‚öôÔ∏è –£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ:
//
//        –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –≤—ã–≤–æ–¥–µ (toString()) –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞ —Å–∏–º–≤–æ–ª (+, -, *, /).
//
//–ü—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ –Ω–æ–ª—å –º–µ—Ç–æ–¥ apply() –¥–æ–ª–∂–µ–Ω –±—Ä–æ—Å–∞—Ç—å ArithmeticException.

//enum Operation {
//    ADD('+') {
//        @Override
//        public double apply(double a, double b) {
//            return a + b;
//        }
//    },
//    SUBTRACT('-') {
//        @Override
//        public double apply(double a, double b) {
//            return a - b;
//        }
//    },
//    MULTIPLY('*') {
//        @Override
//        public double apply(double a, double b) {
//            return a * b;
//        }
//    },
//    DIVIDE('/') {
//        @Override
//        public double apply(double a, double b) {
//            if (b == 0) throw new ArithmeticException("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!");
//            return a / b;
//        }
//    };
//
//    private final char symbol;
//
//    Operation(char symbol) {
//        this.symbol = symbol;
//    }
//
//    public abstract double apply(double a, double b);
//
//    @Override
//    public String toString() {
//        return String.valueOf(symbol);
//    }
//}
//
//public class CountEnum {
//    public static void main(String[] args) {
//        double a = 5, b = 3;
//        System.out.println("ADD: " + Operation.ADD.apply(a, b));
//        System.out.println("SUBTRACT: " + Operation.SUBTRACT.apply(a, b));
//        System.out.println("MULTIPLY: " + Operation.MULTIPLY.apply(2, 4));
//
//        try {
//            System.out.println("DIVIDE: " + Operation.DIVIDE.apply(6, 0));
//        } catch (ArithmeticException e) {
//            System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
//        }
//    }
//}
