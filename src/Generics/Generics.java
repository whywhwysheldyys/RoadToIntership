package Generics;


//    üîπ –ó–∞–¥–∞—á–∞ 1 ‚Äî –ü—Ä–æ—Å—Ç–∞—è
//
//    –°–æ–∑–¥–∞–π –æ–±–æ–±—â—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å Box<T>, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –ª—é–±–æ–≥–æ —Ç–∏–ø–∞.
//    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
//
//    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ T value.
//
//            –ú–µ—Ç–æ–¥—ã:
//
//    public T getValue();
//    public void setValue(T value);
//
//
//    –í main() —Å–æ–∑–¥–∞–π:
//
//    Box<Integer> —Å —á–∏—Å–ª–æ–º 10
//
//    Box<String> —Å–æ —Å—Ç—Ä–æ–∫–æ–π "Hello"
//
//    –í—ã–≤–µ–¥–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–æ–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
//
//    –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
//
//    Integer Box —Å–æ–¥–µ—Ä–∂–∏—Ç: 10
//    String Box —Å–æ–¥–µ—Ä–∂–∏—Ç: Hello

//    public class Generics {
//
//        static class Box<T> {
//            private T value;
//
//            public Box(T value) {
//                this.value = value;
//            }
//
//            public T getValue() {
//                return value;
//            }
//
//            public void setValue(T value) {
//                this.value = value;
//            }
//        }
//
//        public static void main(String[] args) {
//
//            Box<Integer> integerBox = new Box<>(10);
//
//            Box<String> stringBox = new Box<>("Hello");
//
//            System.out.println("Integer Box —Å–æ–¥–µ—Ä–∂–∏—Ç: " + integerBox.getValue());
//            System.out.println("String Box —Å–æ–¥–µ—Ä–∂–∏—Ç: " + stringBox.getValue());
//        }
//    }


//    üîπ –ó–∞–¥–∞—á–∞ 2 ‚Äî –°—Ä–µ–¥–Ω—è—è
//
//    –°–æ–∑–¥–∞–π –æ–±–æ–±—â—ë–Ω–Ω—ã–π –º–µ—Ç–æ–¥ countGreaterThan():
//
//    public static <T extends Comparable<T>> int countGreaterThan(T[] array, T element)
//
//
//    –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ element.
//
//    –ü—Ä–∏–º–µ—Ä:
//
//    Integer[] nums = {1, 5, 7, 3, 9};
//System.out.println(countGreaterThan(nums, 4)); // 3
//
//
//    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
//
//    –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤, —Ä–µ–∞–ª–∏–∑—É—é—â–∏—Ö Comparable (–Ω–∞–ø—Ä–∏–º–µ—Ä, Integer, String, Double).
//
//    –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Stream API (—Ç–æ–ª—å–∫–æ —Ü–∏–∫–ª—ã).


//public class Generics {
//
//    public static <T extends Comparable<T>> int countGreaterThan(T[] array, T element) {
//        int count = 0;
//        for (T item : array) {
//            if (item.compareTo(element) > 0) {
//                count++;
//            }
//        }
//        return count;
//    }
//
//    public static void main(String[] args) {
//        Integer[] nums = {1, 5, 7, 3, 9};
//        System.out.println(countGreaterThan(nums, 4));
//    }
//}

//üîπ –ó–∞–¥–∞—á–∞ 3 ‚Äî –°–ª–æ–∂–Ω–∞—è
//
//–°–æ–∑–¥–∞–π –æ–±–æ–±—â—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Pair<K, V> (–∫–ª—é—á + –∑–Ω–∞—á–µ–Ω–∏–µ).
//–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
//
//–ü–æ–ª—è private K key; private V value;
//
//–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Pair(K key, V value)
//
//–ì–µ—Ç—Ç–µ—Ä—ã getKey(), getValue()
//
//–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏ toString() —Ç–∞–∫, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫:
//
//Pair{key=1, value=One}
//
//
//–í main() —Å–æ–∑–¥–∞–π:
//
//Pair<Integer, String> pair1 = new Pair<>(1, "One");
//Pair<String, Double> pair2 = new Pair<>("Pi", 3.14);
//
//
//–∏ –≤—ã–≤–µ–¥–∏ –æ–±–∞ –æ–±—ä–µ–∫—Ç–∞.

//public class Generics {
//
//
//        static class Pair<K, V> {
//            private K key;
//            private V value;
//
//            public Pair(K key, V value) {
//                this.key = key;
//                this.value = value;
//            }
//
//            public K getKey() {
//                return key;
//            }
//
//            public V getValue() {
//                return value;
//            }
//
//            @Override
//            public String toString() {
//                return "Pair{key=" + key + ", value=" + value + "}";
//            }
//        }
//
//        public static void main (String[]args){
//            Pair<Integer, String> pair1 = new Pair<>(1, "One");
//            Pair<String, Double> pair2 = new Pair<>("Pi", 3.14);
//
//            System.out.println(pair1);
//            System.out.println(pair2);
//        }
//    }

