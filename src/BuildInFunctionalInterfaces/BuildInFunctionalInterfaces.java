package BuildInFunctionalInterfaces;

//üîπ –ó–∞–¥–∞—á–∞ 1 (–ø—Ä–æ—Å—Ç–∞—è)
//
//–ò—Å–ø–æ–ª—å–∑—É–π Consumer<String> –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫:
//
//List<String> words = List.of("Java", "Lambda", "Stream");
//
//
//–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤—ã–≤–µ–¥–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ forEach.

//import java.util.List;
//import java.util.function.Consumer;
//
//public class BuildInFunctionalInterfaces {
//    public static void main(String[] args) {
//        List<String> words = List.of("Java", "Lambda", "Stream");
//
//        Consumer<String> printer = word -> System.out.println(word);
//        words.forEach(printer);
//    }
//}

//üîπ –ó–∞–¥–∞—á–∞ 2 (—Å—Ä–µ–¥–Ω—è—è)
//
//–ò—Å–ø–æ–ª—å–∑—É–π Function<Integer, String> –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É:
//
//–ï—Å–ª–∏ —á–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å "Even",
//
//–ï—Å–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å "Odd".
//–ü—Ä–æ–≤–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∏—Å–ª–∞—Ö –∏ –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

//import java.util.function.Function;
//
//public class BuildInFunctionalInterfaces {
//    public static void main(String[] args) {
//        Function<Integer, String> parityChecker = number -> number % 2 == 0 ? "Even" : "Odd";
//
//        System.out.println(parityChecker.apply(4));
//        System.out.println(parityChecker.apply(7));
//        System.out.println(parityChecker.apply(0));
//        System.out.println(parityChecker.apply(13));
//    }
//}

//üîπ –ó–∞–¥–∞—á–∞ 3 (—Å–ª–æ–∂–Ω–∞—è)
//
//–ò—Å–ø–æ–ª—å–∑—É–π —Ü–µ–ø–æ—á–∫—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:
//–°–æ–∑–¥–∞–π Predicate<Integer> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ,
//–∏ Function<Integer, Integer> –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è —á–∏—Å–ª–∞.
//
//–ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏ –º–µ—Ç–æ–¥:
//
//public static void processNumbers(List<Integer> numbers,
//                                  Predicate<Integer> filter,
//                                  Function<Integer, Integer> mapper,
//                                  Consumer<Integer> action)
//
//
//–∫–æ—Ç–æ—Ä—ã–π:
//
//–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ filter,
//
//–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–µ—Ä–µ–∑ mapper,
//
//–ü—Ä–∏–º–µ–Ω—è–µ—Ç action (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç).
//
//–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ —á–∏—Å–µ–ª –∏ –ª—è–º–±–¥–∞–º–∏.



//import java.util.List;
//import java.util.function.Predicate;
//import java.util.function.Function;
//import java.util.function.Consumer;
//
//public class BuildInFunctionalInterfaces {
//    public static void processNumbers(List<Integer> numbers,
//                                      Predicate<Integer> filter,
//                                      Function<Integer, Integer> mapper,
//                                      Consumer<Integer> action) {
//        for (Integer number : numbers) {
//            if (filter.test(number)) {
//                Integer result = mapper.apply(number);
//                action.accept(result);
//            }
//        }
//    }
//
//    public static void main(String[] args) {
//        Predicate<Integer> positiveFilter = n -> n > 0;
//        Function<Integer, Integer> doubler = n -> n * 2;
//
//        List<Integer> numbers1 = List.of(-2, -1, 0, 1, 2, 3);
//        List<Integer> numbers2 = List.of(5, 10, 15, 20);
//
//        processNumbers(numbers1, positiveFilter, doubler, System.out::println);
//
//        System.out.println("---");
//
//        processNumbers(numbers2,
//                n -> n % 2 == 0,
//                n -> n * 3,
//                System.out::println);
//    }
//}