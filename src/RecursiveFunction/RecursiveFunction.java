package RecursiveFunction;

public class RecursiveFunction {


//    –ó–∞–¥–∞—á–∞ 1 (–ø—Ä–æ—Å—Ç–∞—è):
//            üìò –£—Å–ª–æ–≤–∏–µ: –ù–∞–ø–∏—à–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é sum(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n.
//    public static int sum(int n) {
//        if (n == 0) return 0;
//        return n + sum(n - 1);
//    }
//    public static void main(String[] args) {
//        System.out.println(sum(10));
//    }

//    –ó–∞–¥–∞—á–∞ 2 (—Å—Ä–µ–¥–Ω—è—è):
//            üìò –£—Å–ª–æ–≤–∏–µ: –†–µ–∞–ª–∏–∑—É–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é countDigits(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ n.
//public static int countDigits(int n) {
//    if (n < 10) return 1;
//    return 1 + countDigits(n / 10);
//}
//    public static void main(String[] args) {
//        System.out.println(countDigits(123456));
//    }

//    –ó–∞–¥–∞—á–∞ 3 (—Å–ª–æ–∂–Ω–∞—è):
//            üìò –£—Å–ª–æ–≤–∏–µ: –ù–∞–ø–∏—à–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é power(a, b), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ a –≤ —Å—Ç–µ–ø–µ–Ω—å
//            b –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.

//    public static int power(int a, int b) {
//        if (b == 0) return 1;
//        return a * power(a, b - 1);
//    }
//    public static void main(String[] args) {
//        System.out.println(power(2, 10));
//    }

}