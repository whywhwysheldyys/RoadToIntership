package ClassesIcklucheniya;

// üß© –¢–µ–º–∞ 2: –ö–ª–∞—Å—Å—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
// –ó–∞–¥–∞–Ω–∏–µ 1:
// –°–æ–∑–¥–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NegativeNumberException, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤ –º–µ—Ç–æ–¥ setAge(int age) –ø–µ—Ä–µ–¥–∞–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
// –ü–µ—Ä–µ—Ö–≤–∞—Ç–∏ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ main –∏ –≤—ã–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!".

class NegativeNumberException extends Exception {
    public NegativeNumberException(String message) {
        super(message);
    }
}

class Person {
    private int age;

    public void setAge(int age) throws NegativeNumberException {
        if (age < 0) {
            throw new NegativeNumberException("–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!");
        }
        this.age = age;
    }

    public int getAge() {
        return age;
    }
}

// –ó–∞–¥–∞–Ω–∏–µ 2:
// –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å BankAccount —Å –º–µ—Ç–æ–¥–æ–º withdraw(double amount).
// –ï—Å–ª–∏ —Å—É–º–º–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ InsufficientFundsException.
// –ü–µ—Ä–µ—Ö–≤–∞—Ç–∏ –µ–≥–æ –≤ main –∏ –≤—ã–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!".

class InsufficientFundsException extends Exception {
    public InsufficientFundsException(String message) {
        super(message);
    }
}

class BankAccount {
    private double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public void withdraw(double amount) throws InsufficientFundsException {
        if (amount > balance) {
            throw new InsufficientFundsException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!");
        }
        balance -= amount;
    }

    public double getBalance() {
        return balance;
    }
}

// –ó–∞–¥–∞–Ω–∏–µ 3:
// –°–æ–∑–¥–∞–π –∏–µ—Ä–∞—Ä—Ö–∏—é –∏—Å–∫–ª—é—á–µ–Ω–∏–π:
// AppException (–±–∞–∑–æ–≤–æ–µ),
// FileException,
// NetworkException.
// –í –º–µ—Ç–æ–¥–µ runApp() —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±—Ä–∞—Å—ã–≤–∞–π –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏—Ö –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ main:
// –¥–ª—è FileException ‚Äî –≤—ã–≤–µ—Å—Ç–∏ "–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞",
// –¥–ª—è NetworkException ‚Äî "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
// –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞".

class AppException extends Exception {
    public AppException(String message) {
        super(message);
    }
}

class FileException extends AppException {
    public FileException(String message) {
        super(message);
    }
}

class NetworkException extends AppException {
    public NetworkException(String message) {
        super(message);
    }
}

class Application {
    public void runApp() throws AppException {
        double random = Math.random();
        if (random < 0.33) {
            throw new FileException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º");
        } else if (random < 0.66) {
            throw new NetworkException("–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
        } else {
            throw new AppException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        }
    }
}

public class ClassesIcklucheniya {
    public static void main(String[] args) {

        Person person = new Person();
        try {
            person.setAge(-5);
        } catch (NegativeNumberException e) {
            System.out.println("–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!");
        }


        BankAccount account = new BankAccount(1000);
        try {
            account.withdraw(1500);
        } catch (InsufficientFundsException e) {
            System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!");
        }


        Application app = new Application();
        try {
            app.runApp();
        } catch (FileException e) {
            System.out.println("–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞");
        } catch (NetworkException e) {
            System.out.println("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
        } catch (AppException e) {
            System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        }
    }
}
