package LambdaVirazheniya;

//üß© –¢–µ–º–∞ 1: –õ—è–º–±–¥–∞ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ—Ç–æ–¥–æ–≤
//üîπ –ó–∞–¥–∞—á–∞ 1 (–ø—Ä–æ—Å—Ç–∞—è)
//
//–°–æ–∑–¥–∞–π –º–µ—Ç–æ–¥:
//
//public static void execute(Runnable action)
//
//
//–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ.
//–í main() –≤—ã–∑–æ–≤–∏ –µ–≥–æ, –ø–µ—Ä–µ–¥–∞–≤ –ª—è–º–±–¥—É, –≤—ã–≤–æ–¥—è—â—É—é –≤ –∫–æ–Ω—Å–æ–ª—å —Ñ—Ä–∞–∑—É
//"Hello from lambda!".


//public class LambdaVirazheniya {
//    public static void execute(Runnable action) {
//        action.run();
//    }
//
//    public static void main(String[] args) {
//        execute(() -> System.out.println("Hello from lambda!"));
//    }
//}

//üîπ –ó–∞–¥–∞—á–∞ 2 (—Å—Ä–µ–¥–Ω—è—è)
//
//–°–æ–∑–¥–∞–π –º–µ—Ç–æ–¥:
//
//public static void process(int a, int b, BiFunction<Integer, Integer, Integer> operation)
//
//
//–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –ª—è–º–±–¥—É, –≤—ã–ø–æ–ª–Ω—è—é—â—É—é –Ω–∞–¥ –Ω–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—é.
//–í—ã–∑–æ–≤–∏ –º–µ—Ç–æ–¥ —Ç—Ä–∏ —Ä–∞–∑–∞, –ø–µ—Ä–µ–¥–∞–≤:
//
//—Å–ª–æ–∂–µ–Ω–∏–µ,
//
//—É–º–Ω–æ–∂–µ–Ω–∏–µ,
//
//–≤—ã—á–∏—Ç–∞–Ω–∏–µ,
//–∏ –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

//import java.util.function.BiFunction;
//
//public class LambdaVirazheniya {
//    public static void process(int a, int b, BiFunction<Integer, Integer, Integer> operation) {
//        int result = operation.apply(a, b);
//        System.out.println(result);
//    }
//
//    public static void main(String[] args) {
//        process(5, 3, (x, y) -> x + y);
//        process(5, 3, (x, y) -> x * y);
//        process(5, 3, (x, y) -> x - y);
//    }
//}

//üîπ –ó–∞–¥–∞—á–∞ 3 (—Å–ª–æ–∂–Ω–∞—è)
//
//–ò—Å–ø–æ–ª—å–∑—É–π —Ü–µ–ø–æ—á–∫—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:
//–°–æ–∑–¥–∞–π Predicate<Integer> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ,
//–∏ Function<Integer, Integer> –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è —á–∏—Å–ª–∞.
//
//–ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏ –º–µ—Ç–æ–¥:
//
//public static void processNumbers(List<Integer> numbers,
//                                  Predicate<Integer> filter,
//                                  Function<Integer, Integer> mapper,
//                                  Consumer<Integer> action)
//
//
//–∫–æ—Ç–æ—Ä—ã–π:
//
//–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ filter,
//
//–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–µ—Ä–µ–∑ mapper,
//
//–ü—Ä–∏–º–µ–Ω—è–µ—Ç action (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç).
//
//–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ —á–∏—Å–µ–ª –∏ –ª—è–º–±–¥–∞–º–∏.

//import java.util.List;
//import java.util.function.Predicate;
//import java.util.function.Function;
//import java.util.function.Consumer;
//
//public class LambdaVirazheniya {
//    public static void processNumbers(List<Integer> numbers,
//                                      Predicate<Integer> filter,
//                                      Function<Integer, Integer> mapper,
//                                      Consumer<Integer> action) {
//        for (Integer number : numbers) {
//            if (filter.test(number)) {
//                Integer result = mapper.apply(number);
//                action.accept(result);
//            }
//        }
//    }
//
//    public static void main(String[] args) {
//        List<Integer> numbers1 = List.of(-2, -1, 0, 1, 2, 3);
//        List<Integer> numbers2 = List.of(10, 15, 20, 25);
//
//        Predicate<Integer> positiveFilter = n -> n > 0;
//        Function<Integer, Integer> doubler = n -> n * 2;
//
//        processNumbers(numbers1, positiveFilter, doubler, System.out::println);
//
//        System.out.println("---");
//
//        processNumbers(numbers2,
//                n -> n % 2 == 0,
//                n -> n + 10,
//                System.out::println);
//    }
//}