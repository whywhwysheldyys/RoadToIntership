package PatternMatching;

public class PatternMatching {
    public static void main(String[] args) {
        printObjectInfo("–ü—Ä–∏–≤–µ—Ç");
        printObjectInfo(3);
    }
    //
//    // üß© Pattern Matching ‚Äî –ü–∞—Ç—Ç–µ—Ä–Ω —Ç–∏–ø–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å instanceof –∏ switch)
//
//    // –ó–∞–¥–∞–Ω–∏–µ 1: –ù–∞–ø–∏—à–∏ –º–µ—Ç–æ–¥ printObjectInfo(Object obj), –∫–æ—Ç–æ—Ä—ã–π:
// –ï—Å–ª–∏ obj ‚Äî —ç—Ç–æ String, –≤—ã–≤–æ–¥–∏—Ç "–°—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π X"
// –ï—Å–ª–∏ obj ‚Äî —ç—Ç–æ Integer, –≤—ã–≤–æ–¥–∏—Ç "–¶–µ–ª–æ–µ —á–∏—Å–ª–æ: X"
// –ï—Å–ª–∏ obj ‚Äî —ç—Ç–æ Double, –≤—ã–≤–æ–¥–∏—Ç "–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ: X"
// –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    public static void printObjectInfo(Object obj) {
        if (obj instanceof String s) {
            System.out.println("–°—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π " + s.length());
        } else if (obj instanceof Integer i) {
            System.out.println("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ: " + i);
        } else if (obj instanceof Double d) {
            System.out.println("–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ: " + d);
        } else {
            System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø");
        }
    }
}
//
//    // –ó–∞–¥–∞–Ω–∏–µ 2: –°–æ–∑–¥–∞–π –º–µ—Ç–æ–¥ calculate(Object obj), –∫–æ—Ç–æ—Ä—ã–π:
// –ï—Å–ª–∏ obj ‚Äî —ç—Ç–æ Integer, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞.
// –ï—Å–ª–∏ obj ‚Äî —ç—Ç–æ Double, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —É–¥–≤–æ–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
// –ï—Å–ª–∏ obj ‚Äî —ç—Ç–æ String, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –¥–ª–∏–Ω—É.
// –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1.
//    public static int calculate(Object obj) {
//        if (obj instanceof Integer i) {
//            return i * i;
//        } else if (obj instanceof Double d) {
//            return (int) (d * 2);
//        } else if (obj instanceof String s) {
//            return s.length();
//        } else {
//            return -1;
//        }
//    }
//
//    // –ó–∞–¥–∞–Ω–∏–µ 3: –ò—Å–ø–æ–ª—å–∑—É—è switch —Å pattern matching, —Ä–µ–∞–ª–∏–∑—É–π –º–µ—Ç–æ–¥ describe(Object o), –∫–æ—Ç–æ—Ä—ã–π:
// –î–ª—è String –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–≠—Ç–æ —Å—Ç—Ä–æ–∫–∞: <–∑–Ω–∞—á–µ–Ω–∏–µ>"
// –î–ª—è Number –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–≠—Ç–æ —á–∏—Å–ª–æ: <–∑–Ω–∞—á–µ–Ω–∏–µ>"
// –î–ª—è null –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî "–ß—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ"
//    public static String describe(Object o) {
//        return switch (o) {
//            case String s -> "–≠—Ç–æ —Å—Ç—Ä–æ–∫–∞: " + s;
//            case Number n -> "–≠—Ç–æ —á–∏—Å–ª–æ: " + n;
//            case null -> "–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ";
//            default -> "–ß—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ";
//        };
//    }
//
// üì¶ Pattern Matching ‚Äî Record-–ø–∞—Ç—Ç–µ—Ä–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å record –∏ switch)
//
//    // –ó–∞–¥–∞–Ω–∏–µ 1: –°–æ–∑–¥–∞–π record Point(int x, int y) –∏ –º–µ—Ç–æ–¥ printQuadrant(Point p), –∫–æ—Ç–æ—Ä—ã–π —Å –ø–æ–º–æ—â—å—é pattern matching –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤ –∫–∞–∫–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ—á–∫–∞:
// x > 0, y > 0 ‚Üí "I —á–µ—Ç–≤–µ—Ä—Ç—å"
// x < 0, y > 0 ‚Üí "II —á–µ—Ç–≤–µ—Ä—Ç—å"
// x < 0, y < 0 ‚Üí "III —á–µ—Ç–≤–µ—Ä—Ç—å"
// x > 0, y < 0 ‚Üí "IV —á–µ—Ç–≤–µ—Ä—Ç—å"
// –∏–Ω–∞—á–µ ‚Üí "–ù–∞ –æ—Å–∏"
//    record Point(int x, int y) {}
//
//    public static String printQuadrant(Point p) {
//        return switch (p) {
//            case Point(int x, int y) when x > 0 && y > 0 -> "I —á–µ—Ç–≤–µ—Ä—Ç—å";
//            case Point(int x, int y) when x < 0 && y > 0 -> "II —á–µ—Ç–≤–µ—Ä—Ç—å";
//            case Point(int x, int y) when x < 0 && y < 0 -> "III —á–µ—Ç–≤–µ—Ä—Ç—å";
//            case Point(int x, int y) when x > 0 && y < 0 -> "IV —á–µ—Ç–≤–µ—Ä—Ç—å";
//            default -> "–ù–∞ –æ—Å–∏";
//        };
//    }
//
//    // –ó–∞–¥–∞–Ω–∏–µ 2: –°–æ–∑–¥–∞–π record Person(String name, int age) –∏ –º–µ—Ç–æ–¥ getCategory(Person p), –∫–æ—Ç–æ—Ä—ã–π —Å –ø–æ–º–æ—â—å—é switch –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// –µ—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç < 14 ‚Üí "–†–µ–±—ë–Ω–æ–∫"
// –æ—Ç 14 –¥–æ 17 ‚Üí "–ü–æ–¥—Ä–æ—Å—Ç–æ–∫"
// –æ—Ç 18 –¥–æ 64 ‚Üí "–í–∑—Ä–æ—Å–ª—ã–π"
// 65 –∏ –≤—ã—à–µ ‚Üí "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä"
//    record Person(String name, int age) {}
//
//    public static String getCategory(Person p) {
//        return switch (p) {
//            case Person(String n, int a) when a < 14 -> "–†–µ–±—ë–Ω–æ–∫";
//            case Person(String n, int a) when a >= 14 && a <= 17 -> "–ü–æ–¥—Ä–æ—Å—Ç–æ–∫";
//            case Person(String n, int a) when a >= 18 && a <= 64 -> "–í–∑—Ä–æ—Å–ª—ã–π";
//            case Person(String n, int a) when a >= 65 -> "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä";
//            default -> "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ";
//        };
//    }
//
//    // –ó–∞–¥–∞–Ω–∏–µ 3: –°–æ–∑–¥–∞–π record Rectangle(Point topLeft, Point bottomRight) –∏ –º–µ—Ç–æ–¥ getWidth(Rectangle r), –∫–æ—Ç–æ—Ä—ã–π —Å –ø–æ–º–æ—â—å—é record-–ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∏—Ä–∏–Ω—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
// (—à–∏—Ä–∏–Ω–∞ = bottomRight.x - topLeft.x)
//    record Rectangle(Point topLeft, Point bottomRight) {}
//
//    public static int getWidth(Rectangle r) {
//        return switch (r) {
//            case Rectangle(Point topLeft, Point bottomRight) -> bottomRight.x() - topLeft.x();
//        };
//    }
//}
